
/* // // Create a "close" button and append it to each list item
// var myNodelist = document.getElementsByClassName("myul>li");
// var i;
// for (i = 0; i < myNodelist.length; i++) {
//   var span = document.createElement("SPAN");
//   var txt = document.createTextNode("\u00D7");
//   span.className = "close";
//   span.appendChild(txt);
//   myNodelist[i].appendChild(span);
// }

// // Click on a close button to hide the current list item
// var close = document.getElementsByClassName("close");
// var i;
// for (i = 0; i < close.length; i++) {
//   close[i].onclick = function() {
//     var div = this.parentElement;
//     div.style.display = "none";
//   }
// }

// // Add a "checked" symbol when clicking on a list item
// var list = document.querySelector('ul');
// list.addEventListener('click', function(ev) {
//   if (ev.target.tagName === 'LI') {
//     ev.target.classList.toggle('checked');
//   }
// }, false);

// // Create a new list item when clicking on the "Add" button
// function newElement() {
//   var li = document.createElement("li");
//   var inputValue = document.getElementById("skills").value;
//   var t = document.createTextNode(inputValue);
//   li.appendChild(t);
//   if (inputValue === '') {
//     alert("You must write something!");
//   } else {
//     document.getElementById("myUL").appendChild(li);
//   }
//   document.getElementById("skills").value = "";

//   var span = document.createElement("SPAN");
//   var txt = document.createTextNode("\u00D7");
//   span.className = "close";
//   span.appendChild(txt);
//   li.appendChild(span);

//   for (i = 0; i < close.length; i++) {
//     close[i].onclick = function() {
//       var div = this.parentElement;
//       div.style.display = "none";
//     }
//   }
// } */

/* Remove margins and padding from the list */
.myul {
    margin: 0;
    padding: 0;
  }

  /* Style the list items */
  .myul li {
    cursor: pointer;
    position: relative;
    padding: 12px 8px 12px 40px;
    background: #eee;
    font-size: 18px;
    transition: 0.2s;

    /* make the list items unselectable */
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }

  /* Set all odd list items to a different color (zebra-stripes) */
  .myul li:nth-child(odd) {
    background: #f9f9f9;
  }

  /* Darker background-color on hover */
  .myul li:hover {
    background: #ddd;
  }



<form method="post" enctype="multipart/form-data">
                {{ csrf_field() }}



<div class="card">
                <div class="card-status bg-orange"></div>
                <div class="card-header">
                    <h3 class="card-title">What skillsets are required?</h3>
                    {{-- <div class="card-options">
                        <a href="#" class="card-options-collapse" data-toggle="card-collapse"><i class="fe fe-chevron-up"></i></a>
                        <a href="#" class="card-options-remove" data-toggle="card-remove"><i class="fe fe-x"></i></a>
                    </div> --}}
                </div>
                <div class="card-body">
                    <div class="card">
                        <div class="card-body">
                            {{-- <form> --}}
                                {{-- <div class="row">
                                <div class="col-auto">
                                    <span class="avatar avatar-xl" style="background-image: url(demo/faces/female/9.jpg)"></span>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                    <label class="form-label">Email-Address</label>
                                    <input class="form-control" placeholder="your-email@domain.com"/>
                                    </div>
                                </div>
                                </div> --}}
                                <div class="form-group">
                                    <label class="form-label">Skills</label>
                                    <div class="input-group">
                                        <input type="text" class="form-control" placeholder="Enter skill...">
                                        <span class="input-group-append">
                                          <button class="btn btn-primary" type="button">+ Add</button>
                                        </span>
                                    </div>
                                </div>
                                <div id="skillUl"></div>
                                {{-- <div class="form-group">
                                    <label class="form-label">Job Description</label>
                                    <textarea class="form-control" rows="7" placeholder="Enter the necessary description"></textarea>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Password</label>
                                    <input type="password" class="form-control" value="password"/>
                                </div> --}}
                                {{-- <div class="form-footer d-flex">
                                    <button class="btn btn-link col-sm-2 mr-auto">Previous</button>
                                    <button class="btn btn-primary col-sm-2 ml-auto">Next</button>
                                </div> --}}
                            {{-- </form> --}}
                        </div>
                    </div>
                </div>
            </div>




return back()->with('success','Item created successfully!');



$user = User::create([
            'first_name' => $data['first_name'],
            'last_name' => $data['last_name'],
            'company_name' => $data['company_name'] ?? null,
            'email' => $data['email'],
            'password' => Hash::make($data['password']),
        ]);

        $accessToken = $user->createToken('authToken')->accessToken;

        return response (['user' => $user, 'access_token' => $accessToken]);


Authentication request


